// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDelegators(t *testing.T) {
	t.Parallel()

	query := Delegators()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDelegatorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDelegatorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Delegators().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDelegatorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DelegatorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDelegatorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DelegatorExists(ctx, tx, o.Address)
	if err != nil {
		t.Errorf("Unable to check if Delegator exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DelegatorExists to return true, but got false.")
	}
}

func testDelegatorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	delegatorFound, err := FindDelegator(ctx, tx, o.Address)
	if err != nil {
		t.Error(err)
	}

	if delegatorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDelegatorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Delegators().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDelegatorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Delegators().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDelegatorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	delegatorOne := &Delegator{}
	delegatorTwo := &Delegator{}
	if err = randomize.Struct(seed, delegatorOne, delegatorDBTypes, false, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}
	if err = randomize.Struct(seed, delegatorTwo, delegatorDBTypes, false, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = delegatorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = delegatorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Delegators().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDelegatorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	delegatorOne := &Delegator{}
	delegatorTwo := &Delegator{}
	if err = randomize.Struct(seed, delegatorOne, delegatorDBTypes, false, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}
	if err = randomize.Struct(seed, delegatorTwo, delegatorDBTypes, false, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = delegatorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = delegatorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func delegatorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func delegatorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Delegator) error {
	*o = Delegator{}
	return nil
}

func testDelegatorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Delegator{}
	o := &Delegator{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, delegatorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Delegator object: %s", err)
	}

	AddDelegatorHook(boil.BeforeInsertHook, delegatorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	delegatorBeforeInsertHooks = []DelegatorHook{}

	AddDelegatorHook(boil.AfterInsertHook, delegatorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	delegatorAfterInsertHooks = []DelegatorHook{}

	AddDelegatorHook(boil.AfterSelectHook, delegatorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	delegatorAfterSelectHooks = []DelegatorHook{}

	AddDelegatorHook(boil.BeforeUpdateHook, delegatorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	delegatorBeforeUpdateHooks = []DelegatorHook{}

	AddDelegatorHook(boil.AfterUpdateHook, delegatorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	delegatorAfterUpdateHooks = []DelegatorHook{}

	AddDelegatorHook(boil.BeforeDeleteHook, delegatorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	delegatorBeforeDeleteHooks = []DelegatorHook{}

	AddDelegatorHook(boil.AfterDeleteHook, delegatorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	delegatorAfterDeleteHooks = []DelegatorHook{}

	AddDelegatorHook(boil.BeforeUpsertHook, delegatorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	delegatorBeforeUpsertHooks = []DelegatorHook{}

	AddDelegatorHook(boil.AfterUpsertHook, delegatorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	delegatorAfterUpsertHooks = []DelegatorHook{}
}

func testDelegatorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDelegatorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(delegatorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDelegatorToManyDelegations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delegator
	var b, c Delegation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, delegationDBTypes, false, delegationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, delegationDBTypes, false, delegationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Delegator = a.Address
	c.Delegator = a.Address

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Delegations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Delegator == b.Delegator {
			bFound = true
		}
		if v.Delegator == c.Delegator {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DelegatorSlice{&a}
	if err = a.L.LoadDelegations(ctx, tx, false, (*[]*Delegator)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Delegations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Delegations = nil
	if err = a.L.LoadDelegations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Delegations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDelegatorToManyDelegatorAddressDelegationsStats(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delegator
	var b, c DelegationsStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, delegationsStatDBTypes, false, delegationsStatColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, delegationsStatDBTypes, false, delegationsStatColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DelegatorAddress, a.Address)
	queries.Assign(&c.DelegatorAddress, a.Address)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DelegatorAddressDelegationsStats().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DelegatorAddress, b.DelegatorAddress) {
			bFound = true
		}
		if queries.Equal(v.DelegatorAddress, c.DelegatorAddress) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DelegatorSlice{&a}
	if err = a.L.LoadDelegatorAddressDelegationsStats(ctx, tx, false, (*[]*Delegator)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DelegatorAddressDelegationsStats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DelegatorAddressDelegationsStats = nil
	if err = a.L.LoadDelegatorAddressDelegationsStats(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DelegatorAddressDelegationsStats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDelegatorToManyAddOpDelegations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delegator
	var b, c, d, e Delegation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, delegatorDBTypes, false, strmangle.SetComplement(delegatorPrimaryKeyColumns, delegatorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Delegation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, delegationDBTypes, false, strmangle.SetComplement(delegationPrimaryKeyColumns, delegationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Delegation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDelegations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Address != first.Delegator {
			t.Error("foreign key was wrong value", a.Address, first.Delegator)
		}
		if a.Address != second.Delegator {
			t.Error("foreign key was wrong value", a.Address, second.Delegator)
		}

		if first.R.DelegationDelegator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DelegationDelegator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Delegations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Delegations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Delegations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDelegatorToManyAddOpDelegatorAddressDelegationsStats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delegator
	var b, c, d, e DelegationsStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, delegatorDBTypes, false, strmangle.SetComplement(delegatorPrimaryKeyColumns, delegatorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DelegationsStat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, delegationsStatDBTypes, false, strmangle.SetComplement(delegationsStatPrimaryKeyColumns, delegationsStatColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DelegationsStat{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDelegatorAddressDelegationsStats(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Address, first.DelegatorAddress) {
			t.Error("foreign key was wrong value", a.Address, first.DelegatorAddress)
		}
		if !queries.Equal(a.Address, second.DelegatorAddress) {
			t.Error("foreign key was wrong value", a.Address, second.DelegatorAddress)
		}

		if first.R.DelegatorAddressDelegator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DelegatorAddressDelegator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DelegatorAddressDelegationsStats[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DelegatorAddressDelegationsStats[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DelegatorAddressDelegationsStats().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDelegatorToManySetOpDelegatorAddressDelegationsStats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delegator
	var b, c, d, e DelegationsStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, delegatorDBTypes, false, strmangle.SetComplement(delegatorPrimaryKeyColumns, delegatorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DelegationsStat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, delegationsStatDBTypes, false, strmangle.SetComplement(delegationsStatPrimaryKeyColumns, delegationsStatColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDelegatorAddressDelegationsStats(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DelegatorAddressDelegationsStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDelegatorAddressDelegationsStats(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DelegatorAddressDelegationsStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DelegatorAddress) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DelegatorAddress) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Address, d.DelegatorAddress) {
		t.Error("foreign key was wrong value", a.Address, d.DelegatorAddress)
	}
	if !queries.Equal(a.Address, e.DelegatorAddress) {
		t.Error("foreign key was wrong value", a.Address, e.DelegatorAddress)
	}

	if b.R.DelegatorAddressDelegator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DelegatorAddressDelegator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DelegatorAddressDelegator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DelegatorAddressDelegator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DelegatorAddressDelegationsStats[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DelegatorAddressDelegationsStats[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDelegatorToManyRemoveOpDelegatorAddressDelegationsStats(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Delegator
	var b, c, d, e DelegationsStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, delegatorDBTypes, false, strmangle.SetComplement(delegatorPrimaryKeyColumns, delegatorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DelegationsStat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, delegationsStatDBTypes, false, strmangle.SetComplement(delegationsStatPrimaryKeyColumns, delegationsStatColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDelegatorAddressDelegationsStats(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DelegatorAddressDelegationsStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDelegatorAddressDelegationsStats(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DelegatorAddressDelegationsStats().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DelegatorAddress) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DelegatorAddress) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DelegatorAddressDelegator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DelegatorAddressDelegator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DelegatorAddressDelegator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DelegatorAddressDelegator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DelegatorAddressDelegationsStats) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DelegatorAddressDelegationsStats[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DelegatorAddressDelegationsStats[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDelegatorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDelegatorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DelegatorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDelegatorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Delegators().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	delegatorDBTypes = map[string]string{`Address`: `character varying`, `FirstSeen`: `timestamp without time zone`, `Alias`: `text`}
	_                = bytes.MinRead
)

func testDelegatorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(delegatorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(delegatorAllColumns) == len(delegatorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDelegatorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(delegatorAllColumns) == len(delegatorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Delegator{}
	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, delegatorDBTypes, true, delegatorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(delegatorAllColumns, delegatorPrimaryKeyColumns) {
		fields = delegatorAllColumns
	} else {
		fields = strmangle.SetComplement(
			delegatorAllColumns,
			delegatorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DelegatorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDelegatorsUpsert(t *testing.T) {
	t.Parallel()

	if len(delegatorAllColumns) == len(delegatorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Delegator{}
	if err = randomize.Struct(seed, &o, delegatorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Delegator: %s", err)
	}

	count, err := Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, delegatorDBTypes, false, delegatorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Delegator struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Delegator: %s", err)
	}

	count, err = Delegators().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
