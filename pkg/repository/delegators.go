// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Delegator is an object representing the database table.
type Delegator struct {
	Address   string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	FirstSeen time.Time   `boil:"first_seen" json:"first_seen" toml:"first_seen" yaml:"first_seen"`
	Alias     null.String `boil:"alias" json:"alias,omitempty" toml:"alias" yaml:"alias,omitempty"`

	R *delegatorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L delegatorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DelegatorColumns = struct {
	Address   string
	FirstSeen string
	Alias     string
}{
	Address:   "address",
	FirstSeen: "first_seen",
	Alias:     "alias",
}

var DelegatorTableColumns = struct {
	Address   string
	FirstSeen string
	Alias     string
}{
	Address:   "delegators.address",
	FirstSeen: "delegators.first_seen",
	Alias:     "delegators.alias",
}

// Generated where

var DelegatorWhere = struct {
	Address   whereHelperstring
	FirstSeen whereHelpertime_Time
	Alias     whereHelpernull_String
}{
	Address:   whereHelperstring{field: "\"delegators\".\"address\""},
	FirstSeen: whereHelpertime_Time{field: "\"delegators\".\"first_seen\""},
	Alias:     whereHelpernull_String{field: "\"delegators\".\"alias\""},
}

// DelegatorRels is where relationship names are stored.
var DelegatorRels = struct {
	Delegations                      string
	DelegatorAddressDelegationsStats string
}{
	Delegations:                      "Delegations",
	DelegatorAddressDelegationsStats: "DelegatorAddressDelegationsStats",
}

// delegatorR is where relationships are stored.
type delegatorR struct {
	Delegations                      DelegationSlice      `boil:"Delegations" json:"Delegations" toml:"Delegations" yaml:"Delegations"`
	DelegatorAddressDelegationsStats DelegationsStatSlice `boil:"DelegatorAddressDelegationsStats" json:"DelegatorAddressDelegationsStats" toml:"DelegatorAddressDelegationsStats" yaml:"DelegatorAddressDelegationsStats"`
}

// NewStruct creates a new relationship struct
func (*delegatorR) NewStruct() *delegatorR {
	return &delegatorR{}
}

func (r *delegatorR) GetDelegations() DelegationSlice {
	if r == nil {
		return nil
	}
	return r.Delegations
}

func (r *delegatorR) GetDelegatorAddressDelegationsStats() DelegationsStatSlice {
	if r == nil {
		return nil
	}
	return r.DelegatorAddressDelegationsStats
}

// delegatorL is where Load methods for each relationship are stored.
type delegatorL struct{}

var (
	delegatorAllColumns            = []string{"address", "first_seen", "alias"}
	delegatorColumnsWithoutDefault = []string{"address", "first_seen"}
	delegatorColumnsWithDefault    = []string{"alias"}
	delegatorPrimaryKeyColumns     = []string{"address"}
	delegatorGeneratedColumns      = []string{}
)

type (
	// DelegatorSlice is an alias for a slice of pointers to Delegator.
	// This should almost always be used instead of []Delegator.
	DelegatorSlice []*Delegator
	// DelegatorHook is the signature for custom Delegator hook methods
	DelegatorHook func(context.Context, boil.ContextExecutor, *Delegator) error

	delegatorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	delegatorType                 = reflect.TypeOf(&Delegator{})
	delegatorMapping              = queries.MakeStructMapping(delegatorType)
	delegatorPrimaryKeyMapping, _ = queries.BindMapping(delegatorType, delegatorMapping, delegatorPrimaryKeyColumns)
	delegatorInsertCacheMut       sync.RWMutex
	delegatorInsertCache          = make(map[string]insertCache)
	delegatorUpdateCacheMut       sync.RWMutex
	delegatorUpdateCache          = make(map[string]updateCache)
	delegatorUpsertCacheMut       sync.RWMutex
	delegatorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var delegatorAfterSelectHooks []DelegatorHook

var delegatorBeforeInsertHooks []DelegatorHook
var delegatorAfterInsertHooks []DelegatorHook

var delegatorBeforeUpdateHooks []DelegatorHook
var delegatorAfterUpdateHooks []DelegatorHook

var delegatorBeforeDeleteHooks []DelegatorHook
var delegatorAfterDeleteHooks []DelegatorHook

var delegatorBeforeUpsertHooks []DelegatorHook
var delegatorAfterUpsertHooks []DelegatorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Delegator) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Delegator) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Delegator) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Delegator) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Delegator) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Delegator) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Delegator) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Delegator) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Delegator) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegatorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDelegatorHook registers your hook function for all future operations.
func AddDelegatorHook(hookPoint boil.HookPoint, delegatorHook DelegatorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		delegatorAfterSelectHooks = append(delegatorAfterSelectHooks, delegatorHook)
	case boil.BeforeInsertHook:
		delegatorBeforeInsertHooks = append(delegatorBeforeInsertHooks, delegatorHook)
	case boil.AfterInsertHook:
		delegatorAfterInsertHooks = append(delegatorAfterInsertHooks, delegatorHook)
	case boil.BeforeUpdateHook:
		delegatorBeforeUpdateHooks = append(delegatorBeforeUpdateHooks, delegatorHook)
	case boil.AfterUpdateHook:
		delegatorAfterUpdateHooks = append(delegatorAfterUpdateHooks, delegatorHook)
	case boil.BeforeDeleteHook:
		delegatorBeforeDeleteHooks = append(delegatorBeforeDeleteHooks, delegatorHook)
	case boil.AfterDeleteHook:
		delegatorAfterDeleteHooks = append(delegatorAfterDeleteHooks, delegatorHook)
	case boil.BeforeUpsertHook:
		delegatorBeforeUpsertHooks = append(delegatorBeforeUpsertHooks, delegatorHook)
	case boil.AfterUpsertHook:
		delegatorAfterUpsertHooks = append(delegatorAfterUpsertHooks, delegatorHook)
	}
}

// One returns a single delegator record from the query.
func (q delegatorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Delegator, error) {
	o := &Delegator{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for delegators")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Delegator records from the query.
func (q delegatorQuery) All(ctx context.Context, exec boil.ContextExecutor) (DelegatorSlice, error) {
	var o []*Delegator

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to Delegator slice")
	}

	if len(delegatorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Delegator records in the query.
func (q delegatorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count delegators rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q delegatorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if delegators exists")
	}

	return count > 0, nil
}

// Delegations retrieves all the delegation's Delegations with an executor.
func (o *Delegator) Delegations(mods ...qm.QueryMod) delegationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"delegations\".\"delegator\"=?", o.Address),
	)

	return Delegations(queryMods...)
}

// DelegatorAddressDelegationsStats retrieves all the delegations_stat's DelegationsStats with an executor via delegator_address column.
func (o *Delegator) DelegatorAddressDelegationsStats(mods ...qm.QueryMod) delegationsStatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"delegations_stats\".\"delegator_address\"=?", o.Address),
	)

	return DelegationsStats(queryMods...)
}

// LoadDelegations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (delegatorL) LoadDelegations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelegator interface{}, mods queries.Applicator) error {
	var slice []*Delegator
	var object *Delegator

	if singular {
		var ok bool
		object, ok = maybeDelegator.(*Delegator)
		if !ok {
			object = new(Delegator)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelegator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelegator))
			}
		}
	} else {
		s, ok := maybeDelegator.(*[]*Delegator)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelegator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelegator))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &delegatorR{}
		}
		args = append(args, object.Address)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &delegatorR{}
			}

			for _, a := range args {
				if a == obj.Address {
					continue Outer
				}
			}

			args = append(args, obj.Address)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`delegations`),
		qm.WhereIn(`delegations.delegator in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delegations")
	}

	var resultSlice []*Delegation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delegations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delegations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delegations")
	}

	if len(delegationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Delegations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &delegationR{}
			}
			foreign.R.DelegationDelegator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Address == foreign.Delegator {
				local.R.Delegations = append(local.R.Delegations, foreign)
				if foreign.R == nil {
					foreign.R = &delegationR{}
				}
				foreign.R.DelegationDelegator = local
				break
			}
		}
	}

	return nil
}

// LoadDelegatorAddressDelegationsStats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (delegatorL) LoadDelegatorAddressDelegationsStats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelegator interface{}, mods queries.Applicator) error {
	var slice []*Delegator
	var object *Delegator

	if singular {
		var ok bool
		object, ok = maybeDelegator.(*Delegator)
		if !ok {
			object = new(Delegator)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelegator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelegator))
			}
		}
	} else {
		s, ok := maybeDelegator.(*[]*Delegator)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelegator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelegator))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &delegatorR{}
		}
		args = append(args, object.Address)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &delegatorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Address) {
					continue Outer
				}
			}

			args = append(args, obj.Address)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`delegations_stats`),
		qm.WhereIn(`delegations_stats.delegator_address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delegations_stats")
	}

	var resultSlice []*DelegationsStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delegations_stats")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delegations_stats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delegations_stats")
	}

	if len(delegationsStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DelegatorAddressDelegationsStats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &delegationsStatR{}
			}
			foreign.R.DelegatorAddressDelegator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Address, foreign.DelegatorAddress) {
				local.R.DelegatorAddressDelegationsStats = append(local.R.DelegatorAddressDelegationsStats, foreign)
				if foreign.R == nil {
					foreign.R = &delegationsStatR{}
				}
				foreign.R.DelegatorAddressDelegator = local
				break
			}
		}
	}

	return nil
}

// AddDelegations adds the given related objects to the existing relationships
// of the delegator, optionally inserting them as new records.
// Appends related to o.R.Delegations.
// Sets related.R.DelegationDelegator appropriately.
func (o *Delegator) AddDelegations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delegation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Delegator = o.Address
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"delegations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"delegator"}),
				strmangle.WhereClause("\"", "\"", 2, delegationPrimaryKeyColumns),
			)
			values := []interface{}{o.Address, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Delegator = o.Address
		}
	}

	if o.R == nil {
		o.R = &delegatorR{
			Delegations: related,
		}
	} else {
		o.R.Delegations = append(o.R.Delegations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &delegationR{
				DelegationDelegator: o,
			}
		} else {
			rel.R.DelegationDelegator = o
		}
	}
	return nil
}

// AddDelegatorAddressDelegationsStats adds the given related objects to the existing relationships
// of the delegator, optionally inserting them as new records.
// Appends related to o.R.DelegatorAddressDelegationsStats.
// Sets related.R.DelegatorAddressDelegator appropriately.
func (o *Delegator) AddDelegatorAddressDelegationsStats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DelegationsStat) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DelegatorAddress, o.Address)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"delegations_stats\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"delegator_address"}),
				strmangle.WhereClause("\"", "\"", 2, delegationsStatPrimaryKeyColumns),
			)
			values := []interface{}{o.Address, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DelegatorAddress, o.Address)
		}
	}

	if o.R == nil {
		o.R = &delegatorR{
			DelegatorAddressDelegationsStats: related,
		}
	} else {
		o.R.DelegatorAddressDelegationsStats = append(o.R.DelegatorAddressDelegationsStats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &delegationsStatR{
				DelegatorAddressDelegator: o,
			}
		} else {
			rel.R.DelegatorAddressDelegator = o
		}
	}
	return nil
}

// SetDelegatorAddressDelegationsStats removes all previously related items of the
// delegator replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DelegatorAddressDelegator's DelegatorAddressDelegationsStats accordingly.
// Replaces o.R.DelegatorAddressDelegationsStats with related.
// Sets related.R.DelegatorAddressDelegator's DelegatorAddressDelegationsStats accordingly.
func (o *Delegator) SetDelegatorAddressDelegationsStats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DelegationsStat) error {
	query := "update \"delegations_stats\" set \"delegator_address\" = null where \"delegator_address\" = $1"
	values := []interface{}{o.Address}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DelegatorAddressDelegationsStats {
			queries.SetScanner(&rel.DelegatorAddress, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DelegatorAddressDelegator = nil
		}
		o.R.DelegatorAddressDelegationsStats = nil
	}

	return o.AddDelegatorAddressDelegationsStats(ctx, exec, insert, related...)
}

// RemoveDelegatorAddressDelegationsStats relationships from objects passed in.
// Removes related items from R.DelegatorAddressDelegationsStats (uses pointer comparison, removal does not keep order)
// Sets related.R.DelegatorAddressDelegator.
func (o *Delegator) RemoveDelegatorAddressDelegationsStats(ctx context.Context, exec boil.ContextExecutor, related ...*DelegationsStat) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DelegatorAddress, nil)
		if rel.R != nil {
			rel.R.DelegatorAddressDelegator = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("delegator_address")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DelegatorAddressDelegationsStats {
			if rel != ri {
				continue
			}

			ln := len(o.R.DelegatorAddressDelegationsStats)
			if ln > 1 && i < ln-1 {
				o.R.DelegatorAddressDelegationsStats[i] = o.R.DelegatorAddressDelegationsStats[ln-1]
			}
			o.R.DelegatorAddressDelegationsStats = o.R.DelegatorAddressDelegationsStats[:ln-1]
			break
		}
	}

	return nil
}

// Delegators retrieves all the records using an executor.
func Delegators(mods ...qm.QueryMod) delegatorQuery {
	mods = append(mods, qm.From("\"delegators\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"delegators\".*"})
	}

	return delegatorQuery{q}
}

// FindDelegator retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelegator(ctx context.Context, exec boil.ContextExecutor, address string, selectCols ...string) (*Delegator, error) {
	delegatorObj := &Delegator{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delegators\" where \"address\"=$1", sel,
	)

	q := queries.Raw(query, address)

	err := q.Bind(ctx, exec, delegatorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from delegators")
	}

	if err = delegatorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return delegatorObj, err
	}

	return delegatorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Delegator) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no delegators provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delegatorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	delegatorInsertCacheMut.RLock()
	cache, cached := delegatorInsertCache[key]
	delegatorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			delegatorAllColumns,
			delegatorColumnsWithDefault,
			delegatorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(delegatorType, delegatorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(delegatorType, delegatorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delegators\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delegators\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into delegators")
	}

	if !cached {
		delegatorInsertCacheMut.Lock()
		delegatorInsertCache[key] = cache
		delegatorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Delegator.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Delegator) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	delegatorUpdateCacheMut.RLock()
	cache, cached := delegatorUpdateCache[key]
	delegatorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			delegatorAllColumns,
			delegatorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update delegators, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delegators\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, delegatorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(delegatorType, delegatorMapping, append(wl, delegatorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update delegators row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for delegators")
	}

	if !cached {
		delegatorUpdateCacheMut.Lock()
		delegatorUpdateCache[key] = cache
		delegatorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q delegatorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for delegators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for delegators")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DelegatorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delegators\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, delegatorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in delegator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all delegator")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Delegator) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no delegators provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delegatorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	delegatorUpsertCacheMut.RLock()
	cache, cached := delegatorUpsertCache[key]
	delegatorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			delegatorAllColumns,
			delegatorColumnsWithDefault,
			delegatorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			delegatorAllColumns,
			delegatorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert delegators, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(delegatorPrimaryKeyColumns))
			copy(conflict, delegatorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delegators\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(delegatorType, delegatorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(delegatorType, delegatorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert delegators")
	}

	if !cached {
		delegatorUpsertCacheMut.Lock()
		delegatorUpsertCache[key] = cache
		delegatorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Delegator record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Delegator) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no Delegator provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), delegatorPrimaryKeyMapping)
	sql := "DELETE FROM \"delegators\" WHERE \"address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from delegators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for delegators")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q delegatorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no delegatorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from delegators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for delegators")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DelegatorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(delegatorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delegators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delegatorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from delegator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for delegators")
	}

	if len(delegatorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Delegator) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelegator(ctx, exec, o.Address)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DelegatorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DelegatorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delegators\".* FROM \"delegators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delegatorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in DelegatorSlice")
	}

	*o = slice

	return nil
}

// DelegatorExists checks if the Delegator row exists.
func DelegatorExists(ctx context.Context, exec boil.ContextExecutor, address string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delegators\" where \"address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, address)
	}
	row := exec.QueryRowContext(ctx, sql, address)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if delegators exists")
	}

	return exists, nil
}

// Exists checks if the Delegator row exists.
func (o *Delegator) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DelegatorExists(ctx, exec, o.Address)
}
