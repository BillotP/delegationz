// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DelegationsStat is an object representing the database table.
type DelegationsStat struct {
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Timestamp        time.Time   `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Kind             StatKind    `boil:"kind" json:"kind" toml:"kind" yaml:"kind"`
	Value            types.JSON  `boil:"value" json:"value" toml:"value" yaml:"value"`
	DelegatorAddress null.String `boil:"delegator_address" json:"delegator_address,omitempty" toml:"delegator_address" yaml:"delegator_address,omitempty"`

	R *delegationsStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L delegationsStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DelegationsStatColumns = struct {
	ID               string
	Timestamp        string
	Kind             string
	Value            string
	DelegatorAddress string
}{
	ID:               "id",
	Timestamp:        "timestamp",
	Kind:             "kind",
	Value:            "value",
	DelegatorAddress: "delegator_address",
}

var DelegationsStatTableColumns = struct {
	ID               string
	Timestamp        string
	Kind             string
	Value            string
	DelegatorAddress string
}{
	ID:               "delegations_stats.id",
	Timestamp:        "delegations_stats.timestamp",
	Kind:             "delegations_stats.kind",
	Value:            "delegations_stats.value",
	DelegatorAddress: "delegations_stats.delegator_address",
}

// Generated where

type whereHelperStatKind struct{ field string }

func (w whereHelperStatKind) EQ(x StatKind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperStatKind) NEQ(x StatKind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperStatKind) LT(x StatKind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperStatKind) LTE(x StatKind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperStatKind) GT(x StatKind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperStatKind) GTE(x StatKind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperStatKind) IN(slice []StatKind) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperStatKind) NIN(slice []StatKind) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DelegationsStatWhere = struct {
	ID               whereHelperint64
	Timestamp        whereHelpertime_Time
	Kind             whereHelperStatKind
	Value            whereHelpertypes_JSON
	DelegatorAddress whereHelpernull_String
}{
	ID:               whereHelperint64{field: "\"delegations_stats\".\"id\""},
	Timestamp:        whereHelpertime_Time{field: "\"delegations_stats\".\"timestamp\""},
	Kind:             whereHelperStatKind{field: "\"delegations_stats\".\"kind\""},
	Value:            whereHelpertypes_JSON{field: "\"delegations_stats\".\"value\""},
	DelegatorAddress: whereHelpernull_String{field: "\"delegations_stats\".\"delegator_address\""},
}

// DelegationsStatRels is where relationship names are stored.
var DelegationsStatRels = struct {
	DelegatorAddressDelegator string
}{
	DelegatorAddressDelegator: "DelegatorAddressDelegator",
}

// delegationsStatR is where relationships are stored.
type delegationsStatR struct {
	DelegatorAddressDelegator *Delegator `boil:"DelegatorAddressDelegator" json:"DelegatorAddressDelegator" toml:"DelegatorAddressDelegator" yaml:"DelegatorAddressDelegator"`
}

// NewStruct creates a new relationship struct
func (*delegationsStatR) NewStruct() *delegationsStatR {
	return &delegationsStatR{}
}

func (r *delegationsStatR) GetDelegatorAddressDelegator() *Delegator {
	if r == nil {
		return nil
	}
	return r.DelegatorAddressDelegator
}

// delegationsStatL is where Load methods for each relationship are stored.
type delegationsStatL struct{}

var (
	delegationsStatAllColumns            = []string{"id", "timestamp", "kind", "value", "delegator_address"}
	delegationsStatColumnsWithoutDefault = []string{"kind", "value"}
	delegationsStatColumnsWithDefault    = []string{"id", "timestamp", "delegator_address"}
	delegationsStatPrimaryKeyColumns     = []string{"id"}
	delegationsStatGeneratedColumns      = []string{}
)

type (
	// DelegationsStatSlice is an alias for a slice of pointers to DelegationsStat.
	// This should almost always be used instead of []DelegationsStat.
	DelegationsStatSlice []*DelegationsStat
	// DelegationsStatHook is the signature for custom DelegationsStat hook methods
	DelegationsStatHook func(context.Context, boil.ContextExecutor, *DelegationsStat) error

	delegationsStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	delegationsStatType                 = reflect.TypeOf(&DelegationsStat{})
	delegationsStatMapping              = queries.MakeStructMapping(delegationsStatType)
	delegationsStatPrimaryKeyMapping, _ = queries.BindMapping(delegationsStatType, delegationsStatMapping, delegationsStatPrimaryKeyColumns)
	delegationsStatInsertCacheMut       sync.RWMutex
	delegationsStatInsertCache          = make(map[string]insertCache)
	delegationsStatUpdateCacheMut       sync.RWMutex
	delegationsStatUpdateCache          = make(map[string]updateCache)
	delegationsStatUpsertCacheMut       sync.RWMutex
	delegationsStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var delegationsStatAfterSelectHooks []DelegationsStatHook

var delegationsStatBeforeInsertHooks []DelegationsStatHook
var delegationsStatAfterInsertHooks []DelegationsStatHook

var delegationsStatBeforeUpdateHooks []DelegationsStatHook
var delegationsStatAfterUpdateHooks []DelegationsStatHook

var delegationsStatBeforeDeleteHooks []DelegationsStatHook
var delegationsStatAfterDeleteHooks []DelegationsStatHook

var delegationsStatBeforeUpsertHooks []DelegationsStatHook
var delegationsStatAfterUpsertHooks []DelegationsStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DelegationsStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DelegationsStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DelegationsStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DelegationsStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DelegationsStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DelegationsStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DelegationsStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DelegationsStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DelegationsStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationsStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDelegationsStatHook registers your hook function for all future operations.
func AddDelegationsStatHook(hookPoint boil.HookPoint, delegationsStatHook DelegationsStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		delegationsStatAfterSelectHooks = append(delegationsStatAfterSelectHooks, delegationsStatHook)
	case boil.BeforeInsertHook:
		delegationsStatBeforeInsertHooks = append(delegationsStatBeforeInsertHooks, delegationsStatHook)
	case boil.AfterInsertHook:
		delegationsStatAfterInsertHooks = append(delegationsStatAfterInsertHooks, delegationsStatHook)
	case boil.BeforeUpdateHook:
		delegationsStatBeforeUpdateHooks = append(delegationsStatBeforeUpdateHooks, delegationsStatHook)
	case boil.AfterUpdateHook:
		delegationsStatAfterUpdateHooks = append(delegationsStatAfterUpdateHooks, delegationsStatHook)
	case boil.BeforeDeleteHook:
		delegationsStatBeforeDeleteHooks = append(delegationsStatBeforeDeleteHooks, delegationsStatHook)
	case boil.AfterDeleteHook:
		delegationsStatAfterDeleteHooks = append(delegationsStatAfterDeleteHooks, delegationsStatHook)
	case boil.BeforeUpsertHook:
		delegationsStatBeforeUpsertHooks = append(delegationsStatBeforeUpsertHooks, delegationsStatHook)
	case boil.AfterUpsertHook:
		delegationsStatAfterUpsertHooks = append(delegationsStatAfterUpsertHooks, delegationsStatHook)
	}
}

// One returns a single delegationsStat record from the query.
func (q delegationsStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DelegationsStat, error) {
	o := &DelegationsStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for delegations_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DelegationsStat records from the query.
func (q delegationsStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (DelegationsStatSlice, error) {
	var o []*DelegationsStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to DelegationsStat slice")
	}

	if len(delegationsStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DelegationsStat records in the query.
func (q delegationsStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count delegations_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q delegationsStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if delegations_stats exists")
	}

	return count > 0, nil
}

// DelegatorAddressDelegator pointed to by the foreign key.
func (o *DelegationsStat) DelegatorAddressDelegator(mods ...qm.QueryMod) delegatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"address\" = ?", o.DelegatorAddress),
	}

	queryMods = append(queryMods, mods...)

	return Delegators(queryMods...)
}

// LoadDelegatorAddressDelegator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (delegationsStatL) LoadDelegatorAddressDelegator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelegationsStat interface{}, mods queries.Applicator) error {
	var slice []*DelegationsStat
	var object *DelegationsStat

	if singular {
		var ok bool
		object, ok = maybeDelegationsStat.(*DelegationsStat)
		if !ok {
			object = new(DelegationsStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelegationsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelegationsStat))
			}
		}
	} else {
		s, ok := maybeDelegationsStat.(*[]*DelegationsStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelegationsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelegationsStat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &delegationsStatR{}
		}
		if !queries.IsNil(object.DelegatorAddress) {
			args = append(args, object.DelegatorAddress)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &delegationsStatR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DelegatorAddress) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DelegatorAddress) {
				args = append(args, obj.DelegatorAddress)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`delegators`),
		qm.WhereIn(`delegators.address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Delegator")
	}

	var resultSlice []*Delegator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Delegator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for delegators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delegators")
	}

	if len(delegatorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DelegatorAddressDelegator = foreign
		if foreign.R == nil {
			foreign.R = &delegatorR{}
		}
		foreign.R.DelegatorAddressDelegationsStats = append(foreign.R.DelegatorAddressDelegationsStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DelegatorAddress, foreign.Address) {
				local.R.DelegatorAddressDelegator = foreign
				if foreign.R == nil {
					foreign.R = &delegatorR{}
				}
				foreign.R.DelegatorAddressDelegationsStats = append(foreign.R.DelegatorAddressDelegationsStats, local)
				break
			}
		}
	}

	return nil
}

// SetDelegatorAddressDelegator of the delegationsStat to the related item.
// Sets o.R.DelegatorAddressDelegator to related.
// Adds o to related.R.DelegatorAddressDelegationsStats.
func (o *DelegationsStat) SetDelegatorAddressDelegator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Delegator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"delegations_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"delegator_address"}),
		strmangle.WhereClause("\"", "\"", 2, delegationsStatPrimaryKeyColumns),
	)
	values := []interface{}{related.Address, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DelegatorAddress, related.Address)
	if o.R == nil {
		o.R = &delegationsStatR{
			DelegatorAddressDelegator: related,
		}
	} else {
		o.R.DelegatorAddressDelegator = related
	}

	if related.R == nil {
		related.R = &delegatorR{
			DelegatorAddressDelegationsStats: DelegationsStatSlice{o},
		}
	} else {
		related.R.DelegatorAddressDelegationsStats = append(related.R.DelegatorAddressDelegationsStats, o)
	}

	return nil
}

// RemoveDelegatorAddressDelegator relationship.
// Sets o.R.DelegatorAddressDelegator to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DelegationsStat) RemoveDelegatorAddressDelegator(ctx context.Context, exec boil.ContextExecutor, related *Delegator) error {
	var err error

	queries.SetScanner(&o.DelegatorAddress, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("delegator_address")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DelegatorAddressDelegator = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DelegatorAddressDelegationsStats {
		if queries.Equal(o.DelegatorAddress, ri.DelegatorAddress) {
			continue
		}

		ln := len(related.R.DelegatorAddressDelegationsStats)
		if ln > 1 && i < ln-1 {
			related.R.DelegatorAddressDelegationsStats[i] = related.R.DelegatorAddressDelegationsStats[ln-1]
		}
		related.R.DelegatorAddressDelegationsStats = related.R.DelegatorAddressDelegationsStats[:ln-1]
		break
	}
	return nil
}

// DelegationsStats retrieves all the records using an executor.
func DelegationsStats(mods ...qm.QueryMod) delegationsStatQuery {
	mods = append(mods, qm.From("\"delegations_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"delegations_stats\".*"})
	}

	return delegationsStatQuery{q}
}

// FindDelegationsStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelegationsStat(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DelegationsStat, error) {
	delegationsStatObj := &DelegationsStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delegations_stats\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, delegationsStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from delegations_stats")
	}

	if err = delegationsStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return delegationsStatObj, err
	}

	return delegationsStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DelegationsStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no delegations_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delegationsStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	delegationsStatInsertCacheMut.RLock()
	cache, cached := delegationsStatInsertCache[key]
	delegationsStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			delegationsStatAllColumns,
			delegationsStatColumnsWithDefault,
			delegationsStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(delegationsStatType, delegationsStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(delegationsStatType, delegationsStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delegations_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delegations_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into delegations_stats")
	}

	if !cached {
		delegationsStatInsertCacheMut.Lock()
		delegationsStatInsertCache[key] = cache
		delegationsStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DelegationsStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DelegationsStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	delegationsStatUpdateCacheMut.RLock()
	cache, cached := delegationsStatUpdateCache[key]
	delegationsStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			delegationsStatAllColumns,
			delegationsStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update delegations_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delegations_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, delegationsStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(delegationsStatType, delegationsStatMapping, append(wl, delegationsStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update delegations_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for delegations_stats")
	}

	if !cached {
		delegationsStatUpdateCacheMut.Lock()
		delegationsStatUpdateCache[key] = cache
		delegationsStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q delegationsStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for delegations_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for delegations_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DelegationsStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegationsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delegations_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, delegationsStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in delegationsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all delegationsStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DelegationsStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no delegations_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delegationsStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	delegationsStatUpsertCacheMut.RLock()
	cache, cached := delegationsStatUpsertCache[key]
	delegationsStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			delegationsStatAllColumns,
			delegationsStatColumnsWithDefault,
			delegationsStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			delegationsStatAllColumns,
			delegationsStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert delegations_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(delegationsStatPrimaryKeyColumns))
			copy(conflict, delegationsStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delegations_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(delegationsStatType, delegationsStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(delegationsStatType, delegationsStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert delegations_stats")
	}

	if !cached {
		delegationsStatUpsertCacheMut.Lock()
		delegationsStatUpsertCache[key] = cache
		delegationsStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DelegationsStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DelegationsStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no DelegationsStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), delegationsStatPrimaryKeyMapping)
	sql := "DELETE FROM \"delegations_stats\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from delegations_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for delegations_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q delegationsStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no delegationsStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from delegations_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for delegations_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DelegationsStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(delegationsStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegationsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delegations_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delegationsStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from delegationsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for delegations_stats")
	}

	if len(delegationsStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DelegationsStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelegationsStat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DelegationsStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DelegationsStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegationsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delegations_stats\".* FROM \"delegations_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delegationsStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in DelegationsStatSlice")
	}

	*o = slice

	return nil
}

// DelegationsStatExists checks if the DelegationsStat row exists.
func DelegationsStatExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delegations_stats\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if delegations_stats exists")
	}

	return exists, nil
}

// Exists checks if the DelegationsStat row exists.
func (o *DelegationsStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DelegationsStatExists(ctx, exec, o.ID)
}
