// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Delegation is an object representing the database table.
type Delegation struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Timestamp  time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Amount     int64     `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Delegator  string    `boil:"delegator" json:"delegator" toml:"delegator" yaml:"delegator"`
	BlockHash  string    `boil:"block_hash" json:"block_hash" toml:"block_hash" yaml:"block_hash"`
	BlockLevel int64     `boil:"block_level" json:"block_level" toml:"block_level" yaml:"block_level"`

	R *delegationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L delegationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DelegationColumns = struct {
	ID         string
	Timestamp  string
	Amount     string
	Delegator  string
	BlockHash  string
	BlockLevel string
}{
	ID:         "id",
	Timestamp:  "timestamp",
	Amount:     "amount",
	Delegator:  "delegator",
	BlockHash:  "block_hash",
	BlockLevel: "block_level",
}

var DelegationTableColumns = struct {
	ID         string
	Timestamp  string
	Amount     string
	Delegator  string
	BlockHash  string
	BlockLevel string
}{
	ID:         "delegations.id",
	Timestamp:  "delegations.timestamp",
	Amount:     "delegations.amount",
	Delegator:  "delegations.delegator",
	BlockHash:  "delegations.block_hash",
	BlockLevel: "delegations.block_level",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DelegationWhere = struct {
	ID         whereHelperint64
	Timestamp  whereHelpertime_Time
	Amount     whereHelperint64
	Delegator  whereHelperstring
	BlockHash  whereHelperstring
	BlockLevel whereHelperint64
}{
	ID:         whereHelperint64{field: "\"delegations\".\"id\""},
	Timestamp:  whereHelpertime_Time{field: "\"delegations\".\"timestamp\""},
	Amount:     whereHelperint64{field: "\"delegations\".\"amount\""},
	Delegator:  whereHelperstring{field: "\"delegations\".\"delegator\""},
	BlockHash:  whereHelperstring{field: "\"delegations\".\"block_hash\""},
	BlockLevel: whereHelperint64{field: "\"delegations\".\"block_level\""},
}

// DelegationRels is where relationship names are stored.
var DelegationRels = struct {
	DelegationDelegator string
}{
	DelegationDelegator: "DelegationDelegator",
}

// delegationR is where relationships are stored.
type delegationR struct {
	DelegationDelegator *Delegator `boil:"DelegationDelegator" json:"DelegationDelegator" toml:"DelegationDelegator" yaml:"DelegationDelegator"`
}

// NewStruct creates a new relationship struct
func (*delegationR) NewStruct() *delegationR {
	return &delegationR{}
}

func (r *delegationR) GetDelegationDelegator() *Delegator {
	if r == nil {
		return nil
	}
	return r.DelegationDelegator
}

// delegationL is where Load methods for each relationship are stored.
type delegationL struct{}

var (
	delegationAllColumns            = []string{"id", "timestamp", "amount", "delegator", "block_hash", "block_level"}
	delegationColumnsWithoutDefault = []string{"id", "timestamp", "amount", "delegator", "block_hash", "block_level"}
	delegationColumnsWithDefault    = []string{}
	delegationPrimaryKeyColumns     = []string{"id"}
	delegationGeneratedColumns      = []string{}
)

type (
	// DelegationSlice is an alias for a slice of pointers to Delegation.
	// This should almost always be used instead of []Delegation.
	DelegationSlice []*Delegation
	// DelegationHook is the signature for custom Delegation hook methods
	DelegationHook func(context.Context, boil.ContextExecutor, *Delegation) error

	delegationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	delegationType                 = reflect.TypeOf(&Delegation{})
	delegationMapping              = queries.MakeStructMapping(delegationType)
	delegationPrimaryKeyMapping, _ = queries.BindMapping(delegationType, delegationMapping, delegationPrimaryKeyColumns)
	delegationInsertCacheMut       sync.RWMutex
	delegationInsertCache          = make(map[string]insertCache)
	delegationUpdateCacheMut       sync.RWMutex
	delegationUpdateCache          = make(map[string]updateCache)
	delegationUpsertCacheMut       sync.RWMutex
	delegationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var delegationAfterSelectHooks []DelegationHook

var delegationBeforeInsertHooks []DelegationHook
var delegationAfterInsertHooks []DelegationHook

var delegationBeforeUpdateHooks []DelegationHook
var delegationAfterUpdateHooks []DelegationHook

var delegationBeforeDeleteHooks []DelegationHook
var delegationAfterDeleteHooks []DelegationHook

var delegationBeforeUpsertHooks []DelegationHook
var delegationAfterUpsertHooks []DelegationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Delegation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Delegation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Delegation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Delegation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Delegation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Delegation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Delegation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Delegation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Delegation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range delegationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDelegationHook registers your hook function for all future operations.
func AddDelegationHook(hookPoint boil.HookPoint, delegationHook DelegationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		delegationAfterSelectHooks = append(delegationAfterSelectHooks, delegationHook)
	case boil.BeforeInsertHook:
		delegationBeforeInsertHooks = append(delegationBeforeInsertHooks, delegationHook)
	case boil.AfterInsertHook:
		delegationAfterInsertHooks = append(delegationAfterInsertHooks, delegationHook)
	case boil.BeforeUpdateHook:
		delegationBeforeUpdateHooks = append(delegationBeforeUpdateHooks, delegationHook)
	case boil.AfterUpdateHook:
		delegationAfterUpdateHooks = append(delegationAfterUpdateHooks, delegationHook)
	case boil.BeforeDeleteHook:
		delegationBeforeDeleteHooks = append(delegationBeforeDeleteHooks, delegationHook)
	case boil.AfterDeleteHook:
		delegationAfterDeleteHooks = append(delegationAfterDeleteHooks, delegationHook)
	case boil.BeforeUpsertHook:
		delegationBeforeUpsertHooks = append(delegationBeforeUpsertHooks, delegationHook)
	case boil.AfterUpsertHook:
		delegationAfterUpsertHooks = append(delegationAfterUpsertHooks, delegationHook)
	}
}

// One returns a single delegation record from the query.
func (q delegationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Delegation, error) {
	o := &Delegation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for delegations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Delegation records from the query.
func (q delegationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DelegationSlice, error) {
	var o []*Delegation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to Delegation slice")
	}

	if len(delegationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Delegation records in the query.
func (q delegationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count delegations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q delegationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if delegations exists")
	}

	return count > 0, nil
}

// DelegationDelegator pointed to by the foreign key.
func (o *Delegation) DelegationDelegator(mods ...qm.QueryMod) delegatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"address\" = ?", o.Delegator),
	}

	queryMods = append(queryMods, mods...)

	return Delegators(queryMods...)
}

// LoadDelegationDelegator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (delegationL) LoadDelegationDelegator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDelegation interface{}, mods queries.Applicator) error {
	var slice []*Delegation
	var object *Delegation

	if singular {
		var ok bool
		object, ok = maybeDelegation.(*Delegation)
		if !ok {
			object = new(Delegation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDelegation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDelegation))
			}
		}
	} else {
		s, ok := maybeDelegation.(*[]*Delegation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDelegation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDelegation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &delegationR{}
		}
		args = append(args, object.Delegator)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &delegationR{}
			}

			for _, a := range args {
				if a == obj.Delegator {
					continue Outer
				}
			}

			args = append(args, obj.Delegator)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`delegators`),
		qm.WhereIn(`delegators.address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Delegator")
	}

	var resultSlice []*Delegator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Delegator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for delegators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delegators")
	}

	if len(delegatorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DelegationDelegator = foreign
		if foreign.R == nil {
			foreign.R = &delegatorR{}
		}
		foreign.R.Delegations = append(foreign.R.Delegations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Delegator == foreign.Address {
				local.R.DelegationDelegator = foreign
				if foreign.R == nil {
					foreign.R = &delegatorR{}
				}
				foreign.R.Delegations = append(foreign.R.Delegations, local)
				break
			}
		}
	}

	return nil
}

// SetDelegationDelegator of the delegation to the related item.
// Sets o.R.DelegationDelegator to related.
// Adds o to related.R.Delegations.
func (o *Delegation) SetDelegationDelegator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Delegator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"delegations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"delegator"}),
		strmangle.WhereClause("\"", "\"", 2, delegationPrimaryKeyColumns),
	)
	values := []interface{}{related.Address, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Delegator = related.Address
	if o.R == nil {
		o.R = &delegationR{
			DelegationDelegator: related,
		}
	} else {
		o.R.DelegationDelegator = related
	}

	if related.R == nil {
		related.R = &delegatorR{
			Delegations: DelegationSlice{o},
		}
	} else {
		related.R.Delegations = append(related.R.Delegations, o)
	}

	return nil
}

// Delegations retrieves all the records using an executor.
func Delegations(mods ...qm.QueryMod) delegationQuery {
	mods = append(mods, qm.From("\"delegations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"delegations\".*"})
	}

	return delegationQuery{q}
}

// FindDelegation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDelegation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Delegation, error) {
	delegationObj := &Delegation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"delegations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, delegationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from delegations")
	}

	if err = delegationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return delegationObj, err
	}

	return delegationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Delegation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no delegations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delegationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	delegationInsertCacheMut.RLock()
	cache, cached := delegationInsertCache[key]
	delegationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			delegationAllColumns,
			delegationColumnsWithDefault,
			delegationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(delegationType, delegationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(delegationType, delegationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"delegations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"delegations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into delegations")
	}

	if !cached {
		delegationInsertCacheMut.Lock()
		delegationInsertCache[key] = cache
		delegationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Delegation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Delegation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	delegationUpdateCacheMut.RLock()
	cache, cached := delegationUpdateCache[key]
	delegationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			delegationAllColumns,
			delegationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update delegations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"delegations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, delegationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(delegationType, delegationMapping, append(wl, delegationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update delegations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for delegations")
	}

	if !cached {
		delegationUpdateCacheMut.Lock()
		delegationUpdateCache[key] = cache
		delegationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q delegationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for delegations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for delegations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DelegationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"delegations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, delegationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in delegation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all delegation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Delegation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no delegations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(delegationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	delegationUpsertCacheMut.RLock()
	cache, cached := delegationUpsertCache[key]
	delegationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			delegationAllColumns,
			delegationColumnsWithDefault,
			delegationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			delegationAllColumns,
			delegationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert delegations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(delegationPrimaryKeyColumns))
			copy(conflict, delegationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"delegations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(delegationType, delegationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(delegationType, delegationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert delegations")
	}

	if !cached {
		delegationUpsertCacheMut.Lock()
		delegationUpsertCache[key] = cache
		delegationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Delegation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Delegation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no Delegation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), delegationPrimaryKeyMapping)
	sql := "DELETE FROM \"delegations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from delegations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for delegations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q delegationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no delegationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from delegations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for delegations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DelegationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(delegationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"delegations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delegationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from delegation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for delegations")
	}

	if len(delegationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Delegation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDelegation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DelegationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DelegationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), delegationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"delegations\".* FROM \"delegations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, delegationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in DelegationSlice")
	}

	*o = slice

	return nil
}

// DelegationExists checks if the Delegation row exists.
func DelegationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"delegations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if delegations exists")
	}

	return exists, nil
}

// Exists checks if the Delegation row exists.
func (o *Delegation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DelegationExists(ctx, exec, o.ID)
}
